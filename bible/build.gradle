apply plugin: 'com.android.application'

def getBuildVersion = { ->
    def version = 'v' + rootProject.versionName + ' (' + new Date().format('yyyy/MM/dd') + ')'
    return version
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        resConfigs "en", "zh-rCN", "zh-rTW"
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        vectorDrawables.useSupportLibrary = true
        resValue 'string', 'build_version', getBuildVersion()
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-android.txt-3.2.1', 'proguard-project.txt'
        }
    }

    if (rootProject.file('ant.properties').exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(rootProject.file('ant.properties')))

        signingConfigs {
            release {
                storeFile file(properties['key.store'])
                storePassword properties['key.store.password']
                keyAlias properties['key.alias']
                keyPassword properties['key.alias.password']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
            debug {
                signingConfig signingConfigs.release
            }
        }

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                if (variant.buildType.name == 'release') {
                    output.outputFileName = "bb-v${rootProject.simpleVersionName}.apk"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude '/META-INF/*.version'
        exclude '/fabric/*.properties'
    }

    aaptOptions {
        ignoreAssetsPattern '!translations.full.json:!reader.full.js:!demo.*.html'
    }

}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation project(':genuine')
}

task copyReleaseApk(type: Copy) {
    from file("build/outputs/apk/release/bb-v${rootProject.simpleVersionName}.apk")
    into rootProject.file('.')
}

task minifyJs(type: Exec) {
    def input = file('src/main/assets/reader.full.js')
    def output = file('src/main/assets/reader.js')
    inputs.file input
    outputs.file output
    outputs.upToDateWhen { output.lastModified() > input.lastModified() }
    commandLine 'uglifyjs', '--timings',
            input.path, '-c', '-m', '-o', output.path
}

afterEvaluate {
    generateReleaseAssets.dependsOn minifyJs
    packageRelease.finalizedBy copyReleaseApk
    compileReleaseNdk.dependsOn ':genuine:externalNativeBuildCleanRelease'
}

project.gradle.addListener(new TaskExecutionListener() {

    void beforeExecute(Task task) {
        if (task.name.startsWith('transformClassesAndResourcesWithProguard')) {
            println android.getDefaultProguardFile('proguard-android.txt')
            task.transform.configuration.useMixedCaseClassNames = true
        }
    }

    void afterExecute(Task task, TaskState state) {
        if (task.name.startsWith('transformClassesAndResourcesWithProguard')) {
            assert task.transform.configuration.useMixedCaseClassNames
        }
    }

})
